// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  firstName           String
  middleName          String?
  lastName            String  
  email               String?   @unique
  role                String?
  department          String?
  emailVerified       DateTime?
  password            String  
  image               String?
  status              String
  ActivityLogs        ActivityLogs[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model CreationToken {
  identifier          String  @unique
  role                String
  department          String
  firstName           String
  lastName            String  
  token               String   @unique
  expires             DateTime
  @@unique([identifier, token])
}

model ForgotPasswordToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
} 

model Room {
  id                     String @unique
  roomName               String
  building               String
  floor                  String
  withTv                 Boolean   @default(false)
  isLecture              Boolean   @default(false)
  isLaboratory           Boolean   @default(false)
  isAirconed             Boolean   @default(false)
  capacity               Int
  electricFans           Int
  functioningComputers   Int
  notFunctioningComputers Int
  status                 String
  disable                Boolean   @default(false)
  schedule               RoomSchedule[]
}

model RoomSchedule {
  id          Int    @id @default(autoincrement())
  roomId      String 
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  facultyName String
  courseCode  String
  section     String
  day         String
  department  String?
  isTemp      Boolean
  beginTime   DateTime @db.Time     
  endTime     DateTime @db.Time 
}



model RoomLogs {
  id          Int      @id @default(autoincrement())
  dateTime    DateTime @default(now())
  facultyName String
  roomId      String
  loggedBy    String
  activity    String
  careOf      String
}

model ActivityLogs {
  id          Int      @id @default(autoincrement())
  dateTime    DateTime @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  activity    String
}

model Feedbacks {
  id            Int      @id @default(autoincrement())
  dateTime      DateTime @default(now())
  department    String
  message       String
  acknowledgeBy String?
  acknowledged  Boolean    @default(false)
  acknowledgedAt     DateTime   @updatedAt
}




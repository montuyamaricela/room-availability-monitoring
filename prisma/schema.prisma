// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// // Necessary for Next auth
// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String? // @db.Text
//   access_token             String? // @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String? // @db.Text
//   session_state            String?
//   user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   refresh_token_expires_in Int?
//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id                  String    @id @default(cuid())
  firstName           String
  middleName          String?
  lastName            String  
  email               String?   @unique
  role                String?
  department          String?
  emailVerified       DateTime?
  password            String  
  image               String?
  status              String
  // accounts      Account[]
  // sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model CreationToken {
  identifier          String  @unique
  role                String
  department          String
  firstName           String
  lastName            String  
  token               String   @unique
  expires             DateTime
  @@unique([identifier, token])
}

model Room {
  id                     String @unique
  roomName               String
  building               String
  floor                  String
  withTv                 Boolean   @default(false)
  isLecture              Boolean   @default(false)
  isLaboratory           Boolean   @default(false)
  isAirconed             Boolean   @default(false)
  capacity               Int
  electricFans           Int
  functioningComputers   Int
  notFunctioningComputers Int
  status                 String
  disable                Boolean   @default(false)
  schedule               RoomSchedule[]
}

model RoomSchedule {
  id          Int    @id @default(autoincrement())
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  faculties   Faculty[] @relation("ScheduleFaculties")
  facultyName String
  courseCode  String
  section     String
  day         String
  beginTime   String
  endTime     String
}

model Faculty {
  id          Int           @id @default(autoincrement())
  facultyName String @unique
  department  String
  schedules   RoomSchedule[] @relation("ScheduleFaculties")
}


model ActivityLogs {
  id          Int      @id @default(autoincrement())
  dateTime    DateTime @default(now())
  facultyName String
  roomId      String
  loggedBy    String
  activity    String
  careOf      String
}

model Feedbacks {
  id         Int      @id @default(autoincrement())
  dateTime   DateTime @default(now())
  department String
  message    String
  status     String
}




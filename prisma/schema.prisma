// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Status {
  AVAILABLE
  VACANT
}


enum Building {
  PANCHO_HALL
  BSBA
  MPG
  OLD_CANTEEN
  HANGAR
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  middleName    String?
  lastName      String  
  email         String?   @unique
  role          String?
  department    String?
  emailVerified DateTime?
  password      String  
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Room {
  id                     String   @id @default(cuid())
  roomName               String
  building               Building @default(PANCHO_HALL)
  floor                  String
  isLecture              Boolean
  isLaboratory           Boolean
  isAirconed             Boolean
  capacity               Int
  electricFans           Int
  functioningComputers   Int
  notFunctioningComputers Int
  status                 Status @default(AVAILABLE)
  schedule               RoomSchedule[]
}

model RoomSchedule {
  id         String   @id @default(cuid())
  roomId     String
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  facultyName String
  courseCode  String
  section    String
  day        DateTime
  beginTime  DateTime
  endTime    DateTime
}

model ActivityLogs {
  id          Int      @id @default(autoincrement())
  dateTime    DateTime @default(now())
  facultyName String
  roomId      String
  loggedBy    String
  activity    String
}

model Feedbacks {
  id         Int      @id @default(autoincrement())
  dateTime   DateTime @default(now())
  department String
  message    String
  status     String
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}
